/*****************************************************************
 *文 件 名: LoadHxnpFile.c
 *功	能: 加载渠道流水文件
******************************************************************/
#include "Ibp.h"
#include "pos_stlm.h"
#include "DbsApi.h"
#include "load.h"

#define FILE_NAME_LEN_MAX   512
#define REPAIR_AMT_SUCC	 1
#define REPAIR_AMT_FAIL	 0

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
#include "tbl_financ_manage.h"
EXEC SQL END DECLARE SECTION;

/************************************************************************************/
/*   声明  ： vPrintVersion(char *pszParm)											*/
/*   功能  ：																		*/
/*  返回值 ： 无																	*/
/************************************************************************************/
void	vPrintVersion(char *pszParm)
{
	if(!pszParm)	return ;
	if(strcmp(sUpper(pszParm), "-V"))   return ;

	fprintf(stdout, "%s\n", g_szVersion);

	exit(0);
}

/************************************************************************************/
/*   函数名：					   装载渠道流水主函数								*/
/************************************************************************************/
/*   声明  ： int main(int argc  , char ** argv )									*/
/*   功能  ： 完成清算全流程														*/
/*   参数  ： argc (参数个数 -- 输入)												*/
/*  返回值 ： RC_SUCC	--  成功													*/
/*		  	  RC_FAIL	--  失败													*/
/************************************************************************************/
int main(int argc, char **argv)
{
	EXEC SQL BEGIN DECLARE SECTION;
	char	szStlmDate[9], szBuss[21];
	EXEC SQL END DECLARE SECTION;

	memset(gsLogFile, 0, sizeof(gsLogFile));
	strcpy(gsLogFile, "LoadHengFeng.log");

	if(5 > argc)
	{
		HtLog(ERR_PARAM, MAIN_ERR, argc, argv[0]);
		return RC_FAIL;
	}

	memset(szStlmDate, 0, sizeof(szStlmDate));
	memset(szBuss, 0, sizeof(szBuss));

	memcpy(szStlmDate, argv[1], 8);
	strcpy(szBuss, "hengfeng");

	if(RC_SUCC != lDbsConnect(DBS_BATCH))
	{
		HtLog(ERR_PARAM, "DbsConnect err:(%d)(%s)", SQLCODE, sDbsError());
		return RC_FAIL;
	}
   
	if(RC_SUCC != nUnloadHengFeng(szStlmDate, szBuss))
	{
		vDbsDisconnect(); 
		HtLog(ERR_PARAM, "卸载恒丰截留明细文件失败!");
		return RC_FAIL;
	}

	vDbsDisconnect();		
	return RC_SUCC;
}	  

/************************************************************************************/
/*   声明  ： int nUnloadHengFeng(char *pszStlmDate, char *pszBuss)					*/
/*   功能  ： 获取渠道文件															*/
/*   参数  ： pszStlmDate 			--装载日期										*/
/*		   ： pszBuss 				--业务类型										*/
/*  返回值 ： RC_SUCC	--  成功													*/
/*			  RC_FAIL	--  失败													*/
/************************************************************************************/
int		nUnloadHengFeng(char *pszStlmDate, char *pszBuss)
{
	EXEC SQL BEGIN DECLARE SECTION;
	long	lRec = 0;
	char	szPath[512], szTime[15], szSettleDate[9];
	char	szBuss[21], szId[41], szState[2];
	EXEC SQL END DECLARE SECTION;
	FILE	*fp = NULL;

	memset(szBuss, 0, sizeof(szBuss));
	memset(szTime, 0, sizeof(szTime));
	memset(szSettleDate, 0, sizeof(szSettleDate));

	memcpy(szBuss, pszBuss, sizeof(szBuss) - 1);
	memcpy(szTime, sGetCurrentTime(), sizeof(szTime) - 1);
	memcpy(szSettleDate, pszStlmDate, sizeof(szSettleDate) - 1);

	snprintf(szPath, sizeof(szPath), "%s/settle/HBDZ_HF_%s.txt", getenv("FILEDIR"), 
		pszStlmDate);
	if(NULL == (fp = fopen(szPath, "w")))
	{
		HtLog(ERR_PARAM, "打开结果文件(%s)失败, err:%s", szPath, strerror(errno));
		return RC_FAIL;
	}

	EXEC SQL SELECT COUNT(*) INTO :lRec FROM TBL_FINANC_MANAGE WHERE
		LOAD_DATE = :szSettleDate AND buss_type = :szBuss;

	fprintf(fp, "%d\n", lRec);

	EXEC SQL DECLARE Cur_finac_manage CURSOR FOR
		SELECT NVL(ID, ' '), NVL(STATE, ' ') FROM TBL_FINANC_MANAGE WHERE
			LOAD_DATE = :szSettleDate AND buss_type = :szBuss;

	EXEC SQL OPEN Cur_finac_manage;
	if(SQLCODE)
	{
		fclose(fp);
		HtLog(ERR_PARAM, "查询恒丰理财明细失败, err:(%d)(%s)", SQLCODE, sDbsError());
		return RC_FAIL;
	}

	while(1)
	{
		memset(szId, 0, sizeof(szId));
		memset(szState, 0, sizeof(szState));
		EXEC SQL FETCH Cur_finac_manage INTO :szId, :szState;
		if(SQLERR)
		{
			fclose(fp);
			HtLog(ERR_PARAM, "获取恒丰截留流水失败, err:(%d)(%s)", SQLCODE, sDbsError());
			EXEC SQL CLOSE Cur_finac_manage;
			return RC_FAIL;
		}
		else if(SQLNOTFOUND)
			break;

		sTrimAll(szId);
		sTrimAll(szState);

		fprintf(fp, "%s,%s,%s\n", szId, szState, szTime);
	}
	fclose(fp);
	EXEC SQL ROLLBACK WORK;

	return RC_SUCC;
}

/************************************************************************************
	code end
 ************************************************************************************/
