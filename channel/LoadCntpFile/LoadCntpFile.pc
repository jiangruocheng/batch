/*****************************************************************
 *文 件 名: LoadCntpFile.c
 *功	能: 加载渠道流水文件
******************************************************************/
#include "Ibp.h"
#include "pos_stlm.h"
#include "DbsApi.h"
#include "load.h"

#define FILE_NAME_LEN_MAX   512

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
#include "tbl_txn_succ.h"
#include "tbl_cup_succ.h"
EXEC SQL END DECLARE SECTION;

/************************************************************************************/
/*   声明  ： vPrintVersion(char *pszParm)											*/
/*   功能  ：																		*/
/*  返回值 ： 无																	*/
/************************************************************************************/
void	vPrintVersion(char *pszParm)
{
	if(!pszParm)	return ;
	if(strcmp(sUpper(pszParm), "-V"))   return ;

	fprintf(stdout, "%s\n", g_szVersion);

	exit(0);
}

/************************************************************************************/
/*   函数名：						装载渠道流水主函数								*/
/************************************************************************************/
/*   声明  ： int main(int argc  , char ** argv )									*/
/*   功能  ： 完成清算全流程														*/
/*   参数  ： argc (参数个数 -- 输入)												*/
/*  返回值 ： RC_SUCC	--	成功													*/
/*			  RC_FAIL	--	失败													*/
/************************************************************************************/
int		main(int argc, char **argv)
{
	int		iRet = 0;
	EXEC SQL BEGIN DECLARE SECTION;
	char	szStlmDate[9], szCupsNo[5];
	EXEC SQL END DECLARE SECTION;

	memset(gsLogFile, 0x00, sizeof(gsLogFile));
	strcpy(gsLogFile, "LoadCntpFile.log");

	if(5 > argc)
	{
		HtLog(ERR_PARAM, MAIN_ERR, argc, argv[0]);
		return RC_FAIL;
	}
	memset(szStlmDate, 0, sizeof(szStlmDate));
	memset(szCupsNo, 0, sizeof(szCupsNo));
	memcpy(szStlmDate, argv[1], 8);
	strcpy(szCupsNo, "cntp");

	iRet = lDbsConnect(DBS_BATCH);
	if(iRet)
	{
		HtLog(ERR_PARAM, "dbsconnect error %d", iRet);
		return RC_FAIL;
	}

	/*删除当天加载数据*/
	EXEC SQL DELETE FROM TBL_CUP_SUCC WHERE STLM_DATE = :szStlmDate AND CUPS_NO = :szCupsNo;
	if(SQL_UD_ERR)
	{
		HtLog(ERR_PARAM, "删除渠道(%s)流水失败, err:(%d)(%s)", szCupsNo, SQLCODE, sDbsError());
		vDbsDisconnect();
		return RC_FAIL;
	}

	if(!memcmp("*", argv[4], 1))	//  非FileScan调启，可能人工或者页面发起
	{
		HtLog(NML_PARAM, "参数*, 未指明文件名, 程序自动FTP获取文件");
		iRet = nGetCupsFile(szStlmDate);
	}
	else
	{
		HtLog(NML_PARAM, "指明装载文件名[%s]", argv[4]);
		iRet = nLoadCntpFile(szStlmDate, argv[4]);
	}
	if(iRet)
	{
		vDbsDisconnect();
		HtLog(ERR_PARAM, "装载银视通渠道对账文件失败! err:(%d)", iRet);
		return RC_FAIL;
	}

	vDbsDisconnect();		
	return RC_SUCC;
}	  

/************************************************************************************/
/*   声明  ： int nGetCupsFile														*/
/*   功能  ： 获取渠道文件															*/
/*   参数  ： pszStlmDate			--装载日期										*/
/*  返回值 ： RC_SUCC		--	成功												*/
/*			  RC_FAIL		--	失败												*/
/************************************************************************************/
int	nGetCupsFile(char *pszDate)
{
	char	szCmd[512], szYDay[9], szFile[512];

	memset(szYDay, 0, sizeof(szYDay));
	strcpy(szYDay, sGetChgDate(pszDate, -1));

	memset(szCmd, 0, sizeof(szCmd));
	snprintf(szCmd, sizeof(szCmd), "sh %s/sbin/cntp_down.sh %s", getenv("HOME"), szYDay);
	system(szCmd);
	HtLog(NML_PARAM, "system cmd [%s]", szCmd);

	memset(szFile, 0, sizeof(szFile));
	snprintf(szFile, sizeof(szFile), "CNTP_ALL_%s.txt", szYDay);
	return	nLoadCntpFile(pszDate, szFile);
}

/************************************************************************************/
/*   声明  ： int nCheckCupsFee(TCupSucc *pstCupTxn, dbMchtCupsInf *pstCupsInf)		*/
/*   功能  ： 核对渠道手续费														*/
/*   参数  ： pstCupTxn			--渠道流水结构										*/
/*		   ： pstCupsInf		--渠道商户费率结构									*/
/*  返回值 ： RC_SUCC		--	成功												*/
/*			  RC_FAIL		--	失败												*/
/************************************************************************************/
int	nCheckCupsFee(TCupSucc *pstCupTxn, dbMchtCupsInf *pstCupsInf)
{

	int		iRet = 0;
	double	dFee = 0.00;

	if(TRADE_TXN_INIT != pstCupTxn->result_flag[0])
		return RC_SUCC;

	dFee = pstCupsInf->fee_rate * pstCupTxn->tx_amt / 100;
	if(pstCupsInf->fee_val > 0.00)
		dFee = (dFee >= pstCupsInf->fee_val) ? pstCupsInf->fee_val : dFee;

	if(fabs(dFee - pstCupTxn->cup_fee) < 0.0051) 
		return RC_SUCC;

	///只有两种手续费计算
	//1亿以下:  0.34	 0.78-26封顶---
	//1亿以上:  0.33	 0.72-24封顶

	if (dFee > pstCupTxn->cup_fee)
	{	///我方多算
		dFee = (pstCupsInf->fee_rate - 0.01) * pstCupTxn->tx_amt / 100;
		if(pstCupsInf->fee_val > 0.00)
		{
			dFee = (pstCupsInf->fee_rate - 0.06) * pstCupTxn->tx_amt / 100;
			dFee = (dFee >= (pstCupsInf->fee_val - 2))?(pstCupsInf->fee_val - 2): dFee;
		}
	}
	else if (dFee < pstCupTxn->cup_fee)
	{ ///我方少算
		dFee = (pstCupsInf->fee_rate + 0.01) * pstCupTxn->tx_amt / 100;
		if(pstCupsInf->fee_val > 0.00)
		{
			dFee = (pstCupsInf->fee_rate + 0.06) * pstCupTxn->tx_amt / 100;
			dFee = (dFee >= (pstCupsInf->fee_val + 2))? (pstCupsInf->fee_val + 2): dFee;
		}
	}

	if(fabs(dFee - pstCupTxn->cup_fee) < 0.0051)
		return RC_SUCC;

	//调整之后仍然不相等
	if (pstCupsInf->fee_val > 0.00)
		HtLog(ERR_PARAM, "交易金额:%.2f, 封顶手续费(%.2f), 手续费不相等:%.2f != %.2f", pstCupTxn->tx_amt,
			pstCupsInf->fee_val, pstCupTxn->cup_fee, dFee);
	else
		HtLog(ERR_PARAM, "交易金额:%.2f, 比率费率, 手续费不相等:%f!= %f, Diff:%f", pstCupTxn->tx_amt,
			dFee, pstCupTxn->cup_fee, fabs(dFee - pstCupTxn->cup_fee));

	return RC_FAIL;

/*
	int	  iRet = 0;
	double   dFee = 0.00; 

	if(TRADE_TXN_INIT != pstCupTxn->result_flag[0])
		return RC_SUCC;  

	dFee = pstCupsInf->fee_rate * pstCupTxn->tx_amt / 100;
	if(pstCupsInf->fee_val > 0.00)
	{
		dFee = (dFee >= pstCupsInf->fee_val)?pstCupsInf->fee_val:dFee;
		//	四舍五入原则0.005 自动进位0.01
		//	if(fabs(dFee - pstCupTxn->cup_fee) - 0.005 < 10e-7)
		if(fabs(dFee - pstCupTxn->cup_fee) < 0.0051)
			return RC_SUCC;
		HtLog(ERR_PARAM, "交易金额:%.2f, 封顶手续费(%.2f), 手续费不相等:%.2f != %.2f", pstCupTxn->tx_amt,
			pstCupsInf->fee_val, pstCupTxn->cup_fee, dFee);
	}
	else
	{
		//  四舍五入原则0.005 自动进位0.01
		if(fabs(dFee - pstCupTxn->cup_fee) < 0.0051)
			return RC_SUCC;
		HtLog(ERR_PARAM, "交易金额:%.2f, 比率费率, 手续费不相等:%f!= %f, Diff:%f", pstCupTxn->tx_amt,
			dFee, pstCupTxn->cup_fee, fabs(dFee - pstCupTxn->cup_fee));
	}

	return RC_FAIL;
*/
}

/************************************************************************************/
/*   声明  ： int nLoadCntpFile(char *pszStlmDate, char *pszFile)					*/
/*   功能  ： 从渠道给的文件中加载渠道流水表										*/
/*   参数  ： pszStlmDate			--装载日期										*/
/*		   :  pszFile				--渠道文件名									*/
/*  返回值 ： RC_SUCC		--	成功												*/
/*			  RC_FAIL		--	失败												*/
/************************************************************************************/
int nLoadCntpFile(char *pszDate, char *pszFile)
{
	int		iRet = 0, lSeqNo = 0, lLine = 0, lVaild = 0; 
	char	szPath[512], szLine[RECORD_LEN_MAX + 1], szTemp[100];
	FILE	*fp = NULL;
	EXEC SQL BEGIN DECLARE SECTION;
	TCupSucc	stCups;
	EXEC SQL END DECLARE SECTION;
	dbMchtCupsInf stCupsInf;
	
	memset(szPath, 0, sizeof(szPath));
	snprintf(szPath, sizeof(szPath), "%s/cntp/%s", getenv("FILEDIR"), pszFile);
	sTrimAll(szPath);

	HtLog(NML_PARAM, "银视通对账文件:%s", szPath);
	iRet = access(szPath, R_OK);
	if(iRet)
	{
		HtLog(ERR_PARAM, "文件[%s]不存在，请查看!, strerr[%s]", szPath, strerror(errno));
		return RC_FAIL;
	}
 
	if(NULL == (fp = fopen(szPath, "r")))
	{
		HtLog(ERR_PARAM, "fopen %s error, :%s.", szPath, strerror(errno));
		return RC_FAIL;
	}
  
	/* get file record */
	memset(szLine, 0, sizeof(szLine));
	while(fgets(szLine, RECORD_LEN_MAX, fp))	
	{
		lLine ++;	
		if(strlen(szLine) == 0 || szLine[0] > '9' || szLine[0] < '0')
		{
			memset(szLine, 0, sizeof(szLine));
			continue;
		}

		memset(&stCups, 0, sizeof(stCups));
		memcpy(stCups.cups_no, "cntp", 4);				//	银商或银行编号
		/* 摘要 */					  
		memcpy(stCups.fill, szLine, 15);
		sTrimAll(stCups.fill);

		/* 第三方终端号 */					  
		memcpy(stCups.term_no, szLine + 16, 8);
		sTrimAll(stCups.term_no);

		/*检查商户是否在本平台注册，对注册的处理，对未注册的不处理*/
		memset(&stCupsInf, 0, sizeof(stCupsInf));
		iRet = lGetMchtRoute(&stCupsInf, stCups.cups_no, stCups.fill, stCups.term_no);
		if(RC_NOTFOUND == iRet)
		{
			memset(szLine, 0, sizeof(szLine));
			HtLog(NML_PARAM, "渠道商户(%s)(%s)在本平台未注册, 不予装载!", stCups.fill,
				stCups.term_no);
			continue;
		}
		else if(iRet)
		{
			fclose(fp);
			HtLog(ERR_PARAM, "查找路由表商户信息错误:(%d)(%s)", iRet, sGetError());
			lDbsRollback();
			return RC_FAIL;
		}

		memcpy(stCups.stlm_date, pszDate, 8);			//	对帐日期
		memcpy(stCups.tx_date, szLine + 25, 8);			//	交易日期
		memcpy(stCups.tx_time, szLine + 33, 6);			//	交易时间

		memset(szTemp, 0, sizeof(szTemp));
		memcpy(szTemp, szLine + 40, 6);						//	交易流水
		sTrimAll(szTemp);
		lSeqNo = atol(szTemp);
		sprintf(stCups.trace_no, "%012d", lSeqNo);

		memcpy(stCups.tx_code, szLine + 47, 12);			//	交易类型
		sTrimAll(stCups.tx_code);
	
		memset(szTemp, 0, sizeof(szTemp));
		memcpy(szTemp, szLine + 60, 12);			  		//	交易金额
		sTrimAll(szTemp);
		stCups.tx_amt = atof(szTemp);

		memset(szTemp, 0, strlen(szTemp));					//	手续费
		memcpy(szTemp, szLine + 73, 12);			  
		sTrimAll(szTemp);
		stCups.cup_fee = atof(szTemp);

		memcpy(stCups.ac_no, szLine + 86, 19);			//	交易账号
		sTrimAll(stCups.ac_no);

		memcpy(stCups.sys_ref_no, szLine + 113, 12);		//	系统检索号
		sTrimAll(stCups.sys_ref_no);

		memcpy(stCups.brf, szLine + 106, 6);
		sTrimAll(stCups.brf);

		/* 唯一键值	  */
		sprintf(stCups.id, "%s%s%s", stCups.cups_no, stCups.tx_date, stCups.trace_no);
		
		/* 第三方KEY */
		sprintf(stCups.cup_key, "%s%s%s", stCups.cups_no, stCups.tx_date, stCups.trace_no);

		/* 结果标示*/
		stCups.result_flag[0] = TRADE_TXN_INIT;
		memcpy(stCups.rec_crt_ts, sGetCurrentTime(), sizeof(stCups.rec_crt_ts) - 1);
	
		iRet = nCheckCupsFee(&stCups, &stCupsInf);
		if(iRet)
		{
			fclose(fp);
			HtLog(ERR_PARAM, "nCheckCupsFee err:(%d), Line(%d)fill(%s)(%s)", iRet, lLine, 
				stCups.fill, stCups.term_no);
			lDbsRollback();
			return RC_FAIL;
		}

		lVaild ++;
		EXEC SQL INSERT INTO TBL_CUP_SUCC VALUES(:stCups);
		if(SQLCODE)
		{
			fclose(fp);
			HtLog(ERR_PARAM, "新增渠道(%s)流水(%s)失败, err:(%d)(%s), Line(%d)", stCups.cups_no,
				stCups.id, SQLCODE, sDbsError(), lLine);
			lDbsRollback();
			return RC_FAIL;
		}
		
		if(lVaild % 1000 == 0)
			lDbsCommit();
	}
	lDbsCommit();  
	fclose(fp);
	HtLog(NML_PARAM, "装载银视通渠道流水完成，装载日期(%s),本地装载有效条数(%d)", pszDate, lVaild);

	return RC_SUCC;							
}
