/*****************************************************************
 *  功能: 流水清分处理程序(计算服务费分润)
 *  Edit History:
 *  	20150521
 ****************************************************************/
#include "Ibp.h"
#include "pos_stlm.h"
#include "DbsApi.h"
#include "load.h"

EXEC SQL BEGIN DECLARE SECTION;
#include "tbl_algo_dtl.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA;


/************************************************************************************/
/*   函数名：					   服务费分润主函数									*/
/************************************************************************************/
/*   声明  ： int main(int argc  , char ** argv )									*/
/*   功能  ： 完成计算服务分润														*/
/*   参数  ： argc (参数个数 -- 输入)											 	*/
/*		   ： argv (参数列表 -- 输入)											 	*/
/*  返回值 ： RC_SUCC		--  成功												*/
/*			  RC_FAIL		--  失败												*/
/************************************************************************************/
int main(int argc , char ** argv)
{   
	int	 iRet = 0;
	char	szSettleDate[9], szSvrType[31], szSettleNum[5];

	memset(gsLogFile, 0, sizeof(gsLogFile));
	sprintf(gsLogFile, "AlgoServiceTxn.log");

	/*判断参数个数*/
	if(argc != 5)
	{
		HtLog(ERR_PARAM, "参数有误 usage:(%d)%s stlm_date settle_num bat_id brh", 
			argc, argv[0]);
		return RC_FAIL;
	}

	memset(szSvrType, 0, sizeof(szSvrType));
	memcpy(szSvrType, argv[4], sizeof(szSvrType) - 1);
	sTrimAll(szSvrType);

	snprintf(gsLogFile, sizeof(gsLogFile), "AlgoServiceTxn_%s.log", szSvrType);
	memset(szSettleDate, 0, sizeof(szSettleDate));
	memset(szSettleNum, 0, sizeof(szSettleNum));
	memcpy(szSettleDate, argv[1], sizeof(szSettleDate) - 1);
	memcpy(szSettleNum, argv[2], sizeof(szSettleNum) - 1);

	HtLog(NML_PARAM, "日期(%s)(%s), 流水类型(%s)明细开始.", szSettleDate, szSettleNum, szSvrType);

	/*连接数据库*/
	iRet = lDbsConnect(DBS_BATCH);
	if(iRet)
	{
		HtLog(ERR_PARAM, "数据库连接失败sqlcode(%d)(%s)", iRet, sDbsError());
		return RC_FAIL;
	}

	/*服务费处理主函数*/
	iRet = nAlgoServiceTxn(szSettleDate, szSettleNum, szSvrType);
	if(iRet)
	{
		HtLog(ERR_PARAM, "对商户清分失败, err:(%d)\n", iRet);
		vDbsDisconnect();
		return RC_FAIL;
	}

	iRet = nInsServClassDtl(szSettleDate, szSvrType);
	if(iRet)
	{
		HtLog(ERR_PARAM, "对生成分润分类明细失败, err:(%d)\n", iRet);
		vDbsDisconnect();
		return RC_FAIL;
	}
	/*断开数据库*/
	vDbsDisconnect();
	HtLog(NML_PARAM, "商户清分流程结束.\n");

	return RC_SUCC;
}

/************************************************************************************/
/*   声明  ： char*  sGetLastMon													*/
/*   功能  ： 计算上个月月份 														*/
/*   参数  ： pszDate			--	日期 											*/
/*  返回值 ： char * 			--  成功										 	*/
/************************************************************************************/
char *sGetLastMon(char *pszDate)
{
	long	lYear = 0, lMon = 0;
	char	szYear[5], szMon[5];
	static	char	szLastMon[10];

	/** 计算上个月月份**/
	memset(szYear, 0, sizeof(szYear));
	memset(szMon, 0, sizeof(szMon));
	memcpy(szYear, pszDate, 4);
	memcpy(szMon, pszDate + 4, 2);
	lYear = atoi(szYear);
	lMon = atoi(szMon);
	if(lMon == 1)
	{
		lYear -= 1;
		lMon = 12;
	}
	else
		lMon -= 1;

	memset(szLastMon, 0, sizeof(szLastMon));
	snprintf(szLastMon, sizeof(szLastMon), "%04d%02d", lYear, lMon);

	return szLastMon;
}

/************************************************************************************/
/*   声明  ： int nAlgoServiceTxn(char *pszSettleDate, char *pszSettleNum, 			*/ 
/*			char *pszCode)															*/
/*   功能  ： 计算服务分润															*/
/*   参数  ： pszSettleDate		--	清算日期										*/
/*		   	  pszSettleNum		--	分润批次										*/
/*		  	  pszCode			--	分润类型										*/
/*  返回值 ： RC_FAIL			--	成功											*/ 
/*			  RC_FAIL			--	失败											*/
/************************************************************************************/
int		nAlgoServiceTxn(char *pszSettleDate, char *pszSettleNum, char *pszCode)
{
	int		 iRet, lCount = 0;
	EXEC SQL BEGIN DECLARE SECTION;
	char	szBefMon[9], szSvrType[5];
	struct tbl_algo_dtl_c	stAlgoDtl;
	EXEC SQL END DECLARE SECTION;

	memset(szSvrType, 0, sizeof(szSvrType));
	memset(szBefMon, 0, sizeof(szBefMon));

	strcpy(szBefMon, sGetLastMon(pszSettleDate));
	memcpy(szSvrType, pszCode, 4);	

	EXEC SQL DECLARE Cur_tbl_algo_dtl CURSOR FOR SELECT A.* FROM TBL_ALGO_DTL A 
		WHERE SUBSTR(TX_DATE, 1, 6) = :szBefMon AND SERVETYPE= :szSvrType ORDER BY TX_DATE;

	EXEC SQL OPEN Cur_tbl_algo_dtl;
	if(SQLCODE)
	{
		HtLog(ERR_PARAM, "查询商户清分明细出错，err:(%d)(%s)", 
			SQLCODE, sDbsError());
		return RC_FAIL;
	}

	while(1)
	{
		EXEC SQL FETCH Cur_tbl_algo_dtl INTO :stAlgoDtl;
		if(SQLCODE == DBS_NOTFOUND)
			break;
		else if(SQLCODE)
		{
			HtLog(ERR_PARAM, "查询商户(%s)清分明细出错，err:(%d)(%s)", szSvrType, 
				SQLCODE, sDbsError());
			EXEC SQL CLOSE Cur_tbl_algo_dtl;
			EXEC SQL ROLLBACK WORK;
			return RC_FAIL;
		}
		sTrimAll(stAlgoDtl.id);
		sTrimAll(stAlgoDtl.servetype);
		iRet = nGetServiceBrhFee(&stAlgoDtl, stAlgoDtl.servetype);	//计算服务费分润
		if(RC_SUCC != iRet)
		{
			HtLog(ERR_PARAM, "计算(%s)服务费分润失败(%s)(%d)", stAlgoDtl.id, stAlgoDtl.servetype, iRet);
			EXEC SQL CLOSE Cur_tbl_algo_dtl;
			EXEC SQL ROLLBACK WORK;
			return RC_FAIL;
		}

		EXEC SQL UPDATE TBL_ALGO_DTL SET SERV_FEE = :stAlgoDtl.serv_fee where id = :stAlgoDtl.id;
		if(SQL_UD_ERR)
		{
			HtLog(ERR_PARAM, "更新清分表状态失败, err:(%d)(%s)ID(%s)", SQLCODE, sDbsError(), stAlgoDtl.id);
			EXEC SQL CLOSE Cur_tbl_algo_dtl;
			EXEC SQL ROLLBACK WORK;
			return RC_FAIL;
		}

		if(++ lCount % 1000 == 0)
			EXEC SQL COMMIT WORK;
	}
	EXEC SQL CLOSE Cur_tbl_algo_dtl;
	EXEC SQL COMMIT WORK;

	HtLog(NML_PARAM, "计算服务(%s)费分润完毕, 分润总笔数(%d)!", szSvrType, lCount);

	return RC_SUCC;
}

/************************************************************************************/
/*   声明  ： int nGetServiceBrhRate() 												*/
/*   功能  ： 获取服务费分润计费模型												*/
/*   参数  ： 																		*/
/*  返回值 ： RC_FAIL			--	成功											*/ 
/*			  RC_FAIL			--	失败											*/
/************************************************************************************/
int	nGetServiceBrhRate(char *pszCode, char *pszOutID, int flag)
{
	long		iRet = 0;
	dbSvceCfg 	dbCfg;

	memset(&dbCfg, 0, sizeof(dbCfg));
	iRet = lGetVersCfg(&dbCfg, pszCode, FIELD_MAX);
	if(RC_SUCC != iRet)
	{
		HtLog(NML_PARAM, "获取服务费分润配置失败(%d)(%s)", iRet, sDbsError());
		return RC_FAIL;
	}
	if (0 == flag)
	{
		strcpy(pszOutID, dbCfg.profit_rate);
	}
	else
	{
		strcpy(pszOutID, dbCfg.profit_brno);
	}

	return RC_SUCC;
}

/************************************************************************************/
/*   声明  ： double dGetAlgoFee(dbDiscAlgo *pstAlgo, double dTxAmt)				*/
/*   功能  ： 计算应收商户手续费													*/
/*   参数  ： 输入																	*/
/*			pstAlgo				--费率模型结构										*/
/*			dTxAmt				--交易金额											*/
/*		 ： 输出																	*/
/*  返回值 ： RC_FAIL			--	成功											*/ 
/*			  RC_FAIL			--	失败											*/
/************************************************************************************/
double	dGetAlgoFee(dbDiscAlgo *pstAlgo, double dTxAmt)
{
	double	  dFee = 0.00, dCalFee = 0.00;
	//	如果是机构分润类, 如果签约-结算为负数，直接不分润，分润金额为0.00;
	if(dTxAmt <= 0.00)
		return dCalFee;

	if(pstAlgo->flag == DISC_ALGO_FIXED)		//	按笔(固定)收费
		dCalFee = pstAlgo->fee_value;
	else if(pstAlgo->flag == DISC_ALGO_RATE)	//	按比收费
	{
		dFee = dTxAmt * pstAlgo->fee_value / 100;
		if(pstAlgo->min_fee > 0)				//	取最小最大区间的费用
			dFee = (pstAlgo->min_fee >= dFee) ? pstAlgo->min_fee : dFee;
		if(pstAlgo->max_fee > 0)
			dFee = (pstAlgo->max_fee <= dFee) ? pstAlgo->max_fee : dFee;

		dCalFee = dFee;
	}
	else if(pstAlgo->flag > DISC_ALGO_FIXED)	//	其他方式未定
		dCalFee = 0.00;

	return dCalFee;
}

/************************************************************************************/
/*   声明  ： int nGetServiceBrhFee(struct tbl_algo_dtl_c *pstAlgoDtl, char *pszCode)*/
/*   功能  ： 计算服务费分润														*/
/*  返回值 ： RC_FAIL			--	成功											*/ 
/*			  RC_FAIL			--	失败											*/
/************************************************************************************/
int	nGetServiceBrhFee(struct tbl_algo_dtl_c *pstAlgoDtl, char *pszCode)
{
	int			iRet = 0, lCount = 0;
	char		szDiscId[9];
	dbDisc		*pstDisc = NULL, stDisc;
	dbDiscAlgo	stAlgo;

	memset(szDiscId, 0, sizeof(szDiscId));
	iRet = nGetServiceBrhRate(pszCode, szDiscId,0);
	if(RC_SUCC != iRet)
	{
		HtLog(ERR_PARAM, "获取服务费率失败! (%d)", iRet);
		return RC_FAIL;
	}

	iRet = lGetServiceDisc(szDiscId, pstAlgoDtl->ac_type, FIELD_MATCH, &pstDisc, (long *)&lCount);
	if(RC_SUCC != iRet)
	{
		HtLog(ERR_PARAM, "获取费率模型(%s)错误(%d), 原因:%s", szDiscId, iRet, sGetError());
		return RC_FAIL;
	}

	memset(&stDisc, 0, sizeof(stDisc));
	iRet = lGetAlgoService(pstDisc, lCount, pstAlgoDtl->tx_amt, &stDisc);
	if(iRet)
	{
		IBPFree(pstDisc);
		HtLog(ERR_PARAM, "获取服务类费率模型(%s)(%d)失败, err:(%d)(%s)", pszCode, lCount, 
			iRet, sGetError());
		return RC_FAIL;
	}
	IBPFree(pstDisc);

	vEXchangeAlgo(&stDisc, &stAlgo);
	//	开始计算服务费
	pstAlgoDtl->serv_fee = dGetAlgoFee(&stAlgo, pstAlgoDtl->serv_fee_kqda);
	return RC_SUCC;
}

/************************************************************************************/
/*   声明  ： int nInsServClassDtl(char *pszSettleDate, char *pszCode)				*/
/*   功能  ： 生成服务费分润分类明细												*/
/*  返回值 ： RC_SUCC		--  成功												*/
/*		   	  RC_FAIL		--  失败												*/
/************************************************************************************/
int		nInsServClassDtl(char *pszSettleDate, char *pszCode)
{
	int		i = 0, iRet = 0, lCount = 0;
	EXEC SQL BEGIN DECLARE SECTION;
	char	szBefMon[10], szId[22], szServCode[90], szStDate[9], szBrhCode[20];
	long	lSeq = 0;
	EXEC SQL END DECLARE SECTION;

	memset(szBefMon, 0, sizeof(szBefMon));
	memset(szStDate, 0, sizeof(szStDate));
	memset(szId, 0, sizeof(szId));
	memset(szServCode, 0, sizeof(szServCode));
	memset(szBrhCode, 0, sizeof(szBrhCode));

	memcpy(szServCode, pszCode,4);
	memcpy(szStDate, pszSettleDate,8);
	strcpy(szBefMon, sGetLastMon(pszSettleDate));
	
	iRet = nGetServiceBrhRate(pszCode, szBrhCode,1);
	if(RC_SUCC != iRet)
	{
		HtLog(ERR_PARAM, "获取服务提供商失败! (%d)", iRet);
		return RC_FAIL;
	}	
	EXEC SQL DELETE FROM TBL_BRH_CLASS_DTL WHERE TX_DATE= :szBefMon  
		AND SETTLE_BRH_ID = :szBrhCode;
	if(SQLCODE && !(DBS_NOTFOUND == SQLCODE && 0 == sqlca.sqlerrd[2]))
	{
		HtLog(ERR_PARAM, "删除服务费分润明细失败 err:(%d)(%s)", SQLCODE, sDbsError());
		return RC_FAIL;
	}

	EXEC SQL SELECT TBL_BRH_CLASS_DTL_SEQ.NEXTVAL INTO :lSeq FROM dual;
	if(0 != SQLCODE)
	{
		HtLog(ERR_PARAM, "获取序列数据失败, err:(%d)(%s)", sqlca.sqlcode, sDbsError());
		return RC_FAIL;
	}
	snprintf(szId, sizeof(szId), "%s%08d", szBefMon, lSeq);

	EXEC SQL INSERT INTO TBL_BRH_CLASS_DTL(ID, SETTLE_DATE, TX_DATE, TX_NUM, TX_AMT, 
			FEE_AMT, SETTLE_AMT, SETTLE_BRH_ID, REC_CRT_TS, REC_UPD_TS) 
		SELECT :szId, :szStDate, :szBefMon, COUNT(*), SUM(TX_AMT), SUM(SERV_FEE_KQDA), 
		SUM(SERV_FEE), :szBrhCode, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'), 
		TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') FROM TBL_ALGO_DTL WHERE 
		SUBSTR(TX_DATE, 1, 6)= :szBefMon AND SERVETYPE= :szServCode GROUP BY SERVETYPE;
	if(SQLCODE)
	{
		HtLog(ERR_PARAM, "插入TBL_SERV_CLASS_DTL表失败, err:(%d)(%s)", SQLCODE, sDbsError());
		EXEC SQL ROLLBACK WORK;
		return RC_FAIL;
	}
	EXEC SQL COMMIT WORK;

	return RC_SUCC;
}
