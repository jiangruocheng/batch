/*****************************************************************
 *  功能: 商户代发明细汇总
 *  Author：DeffPuzzL
 *  Edit History:
 ****************************************************************/
#include "Ibp.h"
#include "pos_stlm.h"
#include "DbsApi.h"
#include "load.h"

EXEC SQL BEGIN DECLARE SECTION;
#include	"tbl_mcht_settle_dtl.h"
#include	"tbl_brh_settle_dtl.h"
#include	"tbl_settle_err.h"
#include	"tbl_settle_txn.h"
#include	"tbl_settle_sum.h"
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA;

/************************************************************************************/
/*   声明  ： vPrintVersion(char *pszParm)											*/
/*   功能  ：																		*/
/*  返回值 ： 无																	*/
/************************************************************************************/
void	vPrintVersion(char *pszParm)
{
	if(!pszParm)	return ;
	if(strcmp(sUpper(pszParm), "-V"))   return ;

	fprintf(stdout, "%s\n", g_szVersion);

	exit(0);
}

/************************************************************************************/
/*   函数名：					   结算主函数										*/
/************************************************************************************/
/*   声明  ： int main(int argc  , char ** argv )									*/
/*   功能  ： 完成清算全流程														*/
/*  返回值 ： RC_SUCC		--  成功												*/ 
/*			  RC_FAIL		--  失败		  										*/
/************************************************************************************/
int main(int argc, char **argv)
{
	int		iRet;
	char	szSettleDate[9], szSettleNum[10];
   
	memset(gsLogFile, 0, sizeof(gsLogFile));
	sprintf(gsLogFile, "GenSettleSum.log");

	vPrintVersion(argv[1]);
	if(argc < 5)
	{
		HtLog(ERR_PARAM, MAIN_ERR, argc, argv[0]);
		return RC_FAIL;
	}
	
	memset(szSettleDate, 0, sizeof(szSettleDate));
	memset(szSettleNum, 0, sizeof(szSettleNum));

	memcpy(szSettleDate, argv[1], sizeof(szSettleDate) - 1);
	memcpy(szSettleNum, argv[2], sizeof(szSettleNum) - 1);
	HtLog(NML_PARAM, "生成清算汇总信息开始...");
	HtLog(NML_PARAM, "清算日期(%s) 清算批序号(%s)", szSettleDate, szSettleNum);

	iRet = lDbsConnect(DBS_BATCH);
	if(iRet)
	{
		HtLog(ERR_PARAM, "数据库连接失败sqlcode[%d]",iRet);
		return RC_FAIL;
	}
	
	iRet = nGetSumByBrh(szSettleDate, szSettleNum);
	if(iRet)
	{
		HtLog(ERR_PARAM, "汇总当日(%s)(%s)清算数据失败, err:(%d)\n", szSettleDate, 
			szSettleNum, iRet);
		vDbsDisconnect();
		return RC_FAIL;
	}
   
	vDbsDisconnect();
	return RC_SUCC;
}

/************************************************************************************/
/*   声明  ： int nGetSumByBrh(char *psStlmDate, char *pszStlNum)					*/
/*   功能  ： 按机构生成汇总流水													*/
/*  返回值 ： RC_SUCC		--  成功					   							*/
/*			  RC_FAIL		--	失败		   										*/
/************************************************************************************/
int		nGetSumByBrh(char *pszSettleDate, char *pszSettleNum)
{
	EXEC SQL BEGIN DECLARE SECTION;
	char			szSettleNum[5], szSettleDate[9];
	TSettleSum		stSettleSum;
	EXEC SQL END DECLARE SECTION;

	memset(szSettleNum, 0, sizeof(szSettleNum));
	memset(szSettleDate, 0, sizeof(szSettleDate));

	memcpy(szSettleNum, pszSettleNum, sizeof(szSettleNum) - 1);
	memcpy(szSettleDate, pszSettleDate, sizeof(szSettleDate) - 1);

	EXEC SQL DELETE FROM TBL_SETTLE_SUM WHERE SETTLE_DATE = :szSettleDate AND 
		SETTLE_NUM = :szSettleNum;
	if(SQL_UD_ERR)
	{
		HtLog(ERR_PARAM, "清理当日汇总冗余数据失败，err:(%d)(%s)", SQLCODE, sDbsError());
		return RC_FAIL;
	}

	EXEC SQL DECLARE Cur_settle_txn CURSOR FOR 
		SELECT SUBSTR(BRH, 1, 3), NVL(SUM(SETTLE_AMT), 0.00), COUNT(*)
  			FROM TBL_SETTLE_TXN
 		WHERE SETTLE_DATE = :szSettleDate AND SETTLE_NUM = :szSettleNum 
			GROUP BY SUBSTR(BRH, 1, 3);

	EXEC SQL OPEN Cur_settle_txn;
	if(SQLCODE)
	{
		HtLog(ERR_PARAM, "查询清算流水记录失败，err:(%d)(%s)", SQLCODE, sDbsError());
		return RC_FAIL;
	}

	while(1)
	{
		memset(&stSettleSum, 0, sizeof(stSettleSum));
		EXEC SQL FETCH Cur_settle_txn INTO :stSettleSum.brh, :stSettleSum.total_amt, 
			:stSettleSum.total_num;
		if(SQLCODE == DBS_NOTFOUND)
			break;
		else if(SQLCODE)
		{
			HtLog(ERR_PARAM, "查询机构清算流水失败, err:(%d)(%s)", SQLCODE, sDbsError());
			EXEC SQL CLOSE Cur_settle_txn;
			return RC_FAIL;
		}

		sTrimAll(stSettleSum.brh); 
		snprintf(stSettleSum.id, sizeof(stSettleSum.id), "%s%s%s", szSettleDate, szSettleNum, 
			stSettleSum.brh);
   		memcpy(stSettleSum.settle_date, szSettleDate, sizeof(stSettleSum.settle_date) - 1);
   		memcpy(stSettleSum.settle_num, szSettleNum, sizeof(stSettleSum.settle_num) - 1);
   		stSettleSum.do_flag[0] = SETTLE_SUM_IN_INIT;
   		strcpy(stSettleSum.settle_mode, "0");
   		memcpy(stSettleSum.rec_crt_ts, sGetCurrentTime(), sizeof(stSettleSum.rec_crt_ts) - 1);

		EXEC SQL INSERT INTO TBL_SETTLE_SUM VALUES(:stSettleSum);
		if(SQLCODE)
		{
	   		HtLog(ERR_PARAM, "新增机构汇总清算数据失败, err:(%d)(%s)", SQLCODE, sDbsError());
	   		return RC_FAIL;
		}
	}

	return RC_SUCC;
}

