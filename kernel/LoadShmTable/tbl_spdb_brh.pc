#include	"Ibp.h"
#include	"DbsApi.h"
#include	"pos_stlm.h"
#include	"load.h"
#include	"table.h"

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
#include	"shmdb.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************
	获取客户表TBL_SPDB_BRH启动内存大小
 ****************************************************************************************/
long	lDefine_SpdbBrh(TABLE t, char *pszSettleDate, char *pszSettleNum)
{
	EXEC SQL BEGIN DECLARE SECTION;
	long	lCount = 0, lSize = 0;
	char	szTable[100];
	EXEC SQL END DECLARE SECTION;

	lSize = sizeof(TblDef);

	memset(szTable, 0, sizeof(szTable));
	strcpy(szTable, sGetTableName(t));

	EXEC SQL SELECT COUNT(*) INTO :lCount FROM TBL_SPDB_BRH WHERE 1 = 1;
	if(RC_SUCC != lInitTblSize(t, lCount, sizeof(dbSpdbBrh), &lSize))
		return RC_FAIL;

	fprintf(stdout, "开始建立表:%s\n", szTable);
	HtLog(NML_PARAM, "初始化表(%s)索引(id)", szTable);
	if(RC_SUCC != IBPSetUnIdx(t, dbSpdbBrh, id, FIELD_LONG))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(id)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(brh_area_no)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbSpdbBrh, brh_area_no, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(brh_area_no)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}
	
	fprintf(stdout, "建立%s表完成 ... success\n", szTable);
	return lSize;
}

/****************************************************************************************
	加载客户表TBL_SPDB_BRH
 ****************************************************************************************/
long	lLoad_SpdbBrh(TABLE t, Tree **pstNode, char *pszSettleDate, char *pszSettleNum)
{
	long	lCount = 0;
	Tree	*pstRoot = NULL;
	EXEC SQL BEGIN DECLARE SECTION;
	dbSpdbBrh	stSpdb;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL DECLARE Cur_spdb_brh CURSOR FOR 
		SELECT NVL(ID, 0), NVL(REGION_NAME, ' '), NVL(BRH_AREA_NO, ' ') 
		FROM TBL_SPDB_BRH WHERE 1 = 1 ORDER BY ID;

	EXEC SQL OPEN Cur_spdb_brh;	
	if(SQLCODE)
	{
		HtLog(ERR_PARAM, "定义表%s错误, (%d)(%s)", sGetTableName(t), SQLCODE, sDbsError());
		return RC_FAIL;
	}

	IBPInitTable(t);
	while(1)
	{
		memset(&stSpdb, 0, sizeof(stSpdb));
		EXEC SQL FETCH Cur_spdb_brh INTO :stSpdb.id, :stSpdb.region_name, :stSpdb.brh_area_no;
		if(SQLERR)
		{
			HtLog(ERR_PARAM, "用游标获取数据失败, (%d)(%s)", SQLCODE, sDbsError());
			EXEC SQL CLOSE Cur_spdb_brh;
			return RC_FAIL;
		}
		else if(SQLNOTFOUND)
			break;
		
		lCount ++;
		if(lGetTblCount(t) <= lCount)
		{
			HtLog(ERR_PARAM, "定义超限，请重新装载(%d)<(%d)!", lGetTblCount(t), lCount);
			EXEC SQL CLOSE Cur_spdb_brh;
			return RC_FAIL;
		}

		sTrimAll(stSpdb.region_name);	
		sTrimAll(stSpdb.brh_area_no);	
		stSpdb.id = lSetEXLong(stSpdb.id);

		if(RC_SUCC != IBPInsertData(t, &stSpdb, sizeof(stSpdb)))
		{
			HtLog(ERR_PARAM, "新增表(%s)数据(%s)失败, 原因:%s", sGetTableName(t),
				stSpdb.region_name, sGetError());
			EXEC SQL CLOSE Cur_spdb_brh;
			vDestroyTree(pstRoot);
			return RC_FAIL;
		}
	}

	EXEC SQL CLOSE Cur_spdb_brh;

	HtLog(NML_PARAM, "(%s)装载表空间总记录(%d), 有效记录(%d)", sGetTableName(t), lGetTblCount(t), 
		pGetTblDef(t)->lValid);

	*pstNode = pstRoot;

	return RC_SUCC;
}

/****************************************************************************************
	end
 ***************************************************************************************/
