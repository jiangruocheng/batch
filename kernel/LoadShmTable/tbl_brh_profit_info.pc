#include	"Ibp.h"
#include	"DbsApi.h"
#include	"pos_stlm.h"
#include	"load.h"
#include	"table.h"

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
#include	"shmdb.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************
	获取客户表TBL_BRH_PROFIT_INFO所需空间大小	
 ****************************************************************************************/
long	lDefine_BrhProfitInfo(TABLE t, char *pszSettleDate, char *pszSettleNum)
{
	EXEC SQL BEGIN DECLARE SECTION;
	long	lCount = 0, lSize = 0;
	char	szTable[100];
	EXEC SQL END DECLARE SECTION;

	lSize = sizeof(TblDef);

	memset(szTable, 0, sizeof(szTable));
	strcpy(szTable, sGetTableName(t));

	EXEC SQL SELECT COUNT(*) INTO :lCount FROM TBL_BRH_PROFIT_INFO WHERE 1 = 1;
	if(RC_SUCC != lInitTblSize(t, lCount, sizeof(dbPfitInfo), &lSize))
		return RC_FAIL;

	fprintf(stdout, "开始建立表:%s\n", szTable);
	HtLog(NML_PARAM, "初始化表(%s)索引(model_id)", szTable);
	if(RC_SUCC != IBPSetUnIdx(t, dbPfitInfo, model_id, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(model_id)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(treaty_id)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbPfitInfo, treaty_id, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(treaty_id)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)查询索引(standard_id)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbPfitInfo, standard_id, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(standard_id)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)查询索引(other_id)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbPfitInfo, other_id, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(other_id)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	fprintf(stdout, "建立%s表完成 ... success\n", szTable);

	return lSize;
}

/****************************************************************************************
	创建客户表
 ****************************************************************************************/
long	lLoad_BrhProfitInfo(TABLE t, Tree **pstNode, char *pszSettleDate, char *pszSettleNum)
{
	long	lCount = 0, lRes = RC_SUCC;
	Tree	*pstRoot = NULL;
	EXEC SQL BEGIN DECLARE SECTION;
	dbPfitInfo  stPfitIf;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL DECLARE Cur_brh_profit_info CURSOR FOR 
		SELECT NVL(MODEL_ID, 0), NVL(TREATY_ID, ' '), NVL(STANDARD_ID, ' '), 
			NVL(OTHER_ID, ' ') 
		FROM TBL_BRH_PROFIT_INFO WHERE 1 = 1 ORDER BY MODEL_ID;

	EXEC SQL OPEN Cur_brh_profit_info;
	if(SQLCODE)
	{	
		HtLog(ERR_PARAM, "定义表%s错误, (%d)(%s)", sGetTableName(t), SQLCODE, sDbsError());
		return RC_FAIL;
	}	

	IBPInitTable(t);
	while(1)
	{	
		memset(&stPfitIf, 0, sizeof(stPfitIf));
		EXEC SQL FETCH Cur_brh_profit_info INTO :stPfitIf.model_id, :stPfitIf.treaty_id, 
			:stPfitIf.standard_id, :stPfitIf.other_id;
		if(SQLERR)
		{	
			HtLog(ERR_PARAM, "用游标获取数据失败, (%d)(%s)", SQLCODE, sDbsError());
			EXEC SQL CLOSE Cur_brh_profit_info;
			vDestroyTree(pstRoot);
			return RC_FAIL;
		}	
		else if(SQLNOTFOUND)
			break;
	 
		lCount ++;
		if(lGetTblCount(t) <= lCount)
		{	
			HtLog(ERR_PARAM, "定义超限，请重新装载!(%d)<(%d)", lGetTblCount(t), lCount);
			EXEC SQL CLOSE Cur_brh_profit_info;
			vDestroyTree(pstRoot);
			return RC_FAIL;
		}	

		sTrimAll(stPfitIf.model_id);	
		sTrimAll(stPfitIf.treaty_id);   
		sTrimAll(stPfitIf.standard_id); 
		sTrimAll(stPfitIf.other_id);

		pstRoot = (Tree *)IBPInsertTree(pstRoot, stPfitIf.model_id, ++(pGetTblDef(t)->lTreeNode),
			dbPfitInfo, model_id, lGetTblPos(t) + ((IBPShm *)pGetShmRun())->m_lOffset, &lRes);
		if(RC_FAIL == lRes)
		{	
			HtLog(ERR_PARAM, "装载分润模型ID(%s)失败, 原因:%s", stPfitIf.model_id, sGetError());
			EXEC SQL CLOSE Cur_brh_profit_info;
			vDestroyTree(pstRoot);
			return RC_FAIL;
		}

		if(RC_SUCC != IBPInsertData(t, &stPfitIf, sizeof(stPfitIf)))
		{
			HtLog(ERR_PARAM, "新增表(%s)数据(%s)失败, 原因:%s", sGetTableName(t), 
				stPfitIf.model_id, sGetError());
			EXEC SQL CLOSE Cur_brh_profit_info;
			vDestroyTree(pstRoot);
			return RC_FAIL;
		}
	}
	EXEC SQL CLOSE Cur_brh_profit_info;

	*pstNode = pstRoot;
	HtLog(NML_PARAM, "(%s)装载表空间总记录(%d), 有效记录(%d)", sGetTableName(t), lGetTblCount(t),
		pGetTblDef(t)->lValid);

	return RC_SUCC;
}

/****************************************************************************************
	end
 ***************************************************************************************/
