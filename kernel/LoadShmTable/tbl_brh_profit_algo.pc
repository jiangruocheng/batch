#include	"Ibp.h"
#include	"DbsApi.h"
#include	"pos_stlm.h"
#include	"load.h"
#include	"table.h"

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
#include	"shmdb.h"
EXEC SQL END DECLARE SECTION;

extern	TblDef* pGetTblDef();

/****************************************************************************************
	获取客户表TBL_BRH_PROFIT_ALGO启动所需表大小	
 ****************************************************************************************/
long	lDefine_BrhProfitAlgo(TABLE t, char *pszSettleDate, char *pszSettleNum)
{
	EXEC SQL BEGIN DECLARE SECTION;
	long	lCount = 0, lSize = 0;
	char	szTable[100];
	EXEC SQL END DECLARE SECTION;

	lSize = sizeof(TblDef);

	memset(szTable, 0, sizeof(szTable));
	strcpy(szTable, sGetTableName(t));

	EXEC SQL SELECT COUNT(*) INTO :lCount FROM TBL_BRH_PROFIT_ALGO WHERE 1 = 1;
	if(RC_SUCC != lInitTblSize(t, lCount, sizeof(dbBrhAlgo), &lSize))
		return RC_FAIL;

	fprintf(stdout, "开始建立表:%s\n", szTable);
	HtLog(NML_PARAM, "初始化表(%s)索引(model_id)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbBrhAlgo, model_id, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(model_id)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(trans_type)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbBrhAlgo, trans_type, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(trans_type)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(mcht_grp)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbBrhAlgo, mcht_grp, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(mcht_grp)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(card_type)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbBrhAlgo, card_type, FIELD_LONG))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(card_type)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(base_fee)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbBrhAlgo, base_fee, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(base_fee)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(profit_ratio)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbBrhAlgo, profit_ratio, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(profit_ratio)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	fprintf(stdout, "建立%s表完成 ... success\n", szTable);

	return lSize;
}

/****************************************************************************************
	加载客户表TBL_BRH_PROFIT_ALGO数据
 ****************************************************************************************/
long	lLoad_BrhProfitAlgo(TABLE t, Tree **pstNode, char *pszSettleDate, char *pszSettleNum)
{
	long	lCount = 0;
	Tree	*pstRoot = NULL;
	EXEC SQL BEGIN DECLARE SECTION;
	dbBrhAlgo	stBAlgo;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL DECLARE Cur_brh_profit_algo CURSOR FOR 
		SELECT NVL(MODEL_ID, 0), NVL(TRANS_TYPE, ' '), NVL(MCHT_GRP, ' '), 
			NVL(CARD_TYPE, 0), NVL(BASE_FEE, ' '), NVL(PROFIT_RATIO, ' ') 
		FROM TBL_BRH_PROFIT_ALGO ORDER BY MODEL_ID;

	EXEC SQL OPEN Cur_brh_profit_algo;	
	if(SQLCODE)
	{
		HtLog(ERR_PARAM, "定义表%s错误, (%d)(%s)", sGetTableName(t), SQLCODE, sDbsError());
		return RC_FAIL;
	}

	IBPInitTable(t);	
	while(1)
	{
		memset(&stBAlgo, 0, sizeof(stBAlgo));
		EXEC SQL FETCH Cur_brh_profit_algo INTO :stBAlgo.model_id, :stBAlgo.trans_type, 
			:stBAlgo.mcht_grp, :stBAlgo.card_type, :stBAlgo.base_fee, 
			:stBAlgo.profit_ratio;
		if(SQLERR)
		{
			HtLog(ERR_PARAM, "用游标获取数据失败, (%d)(%s)", SQLCODE, sDbsError());
			EXEC SQL CLOSE Cur_brh_profit_algo;
			return RC_FAIL;
		}
		else if(SQLNOTFOUND)
			break;
		
		lCount ++;
		if(lGetTblCount(t) <= lCount)
		{
			HtLog(ERR_PARAM, "定义超限，请重新装载(%d)<(%d)!", lGetTblCount(t), lCount);
			EXEC SQL CLOSE Cur_brh_profit_algo;
			return RC_FAIL;
		}

		sTrimAll(stBAlgo.model_id);
		sTrimAll(stBAlgo.trans_type);	
		sTrimAll(stBAlgo.mcht_grp);	
		sTrimAll(stBAlgo.base_fee);	
		sTrimAll(stBAlgo.profit_ratio);	
		stBAlgo.card_type = lSetEXLong(stBAlgo.card_type);

		if(RC_SUCC != IBPInsertData(t, &stBAlgo, sizeof(dbBrhAlgo)))
		{
			HtLog(ERR_PARAM, "新增表(%s)数据(%s)失败, 原因:%s", sGetTableName(t), 
				stBAlgo.model_id, sGetError());
			EXEC SQL CLOSE Cur_brh_profit_algo;
			return RC_FAIL;
		}		
	}
	EXEC SQL CLOSE Cur_brh_profit_algo;

	HtLog(NML_PARAM, "(%s)装载表空间总记录(%d), 有效记录(%d)", sGetTableName(t), lGetTblCount(t), 
		pGetTblDef(t)->lValid);	

	*pstNode = pstRoot;
	return RC_SUCC;
}

/****************************************************************************************
	end
 ***************************************************************************************/
