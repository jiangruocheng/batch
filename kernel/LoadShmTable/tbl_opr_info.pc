#include	"Ibp.h"
#include	"DbsApi.h"
#include	"pos_stlm.h"
#include	"load.h"
#include	"table.h"

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
#include	"shmdb.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************
	获取客户表TBL_OPR_INFO启动内存大小
 ****************************************************************************************/
long	lDefine_OprInfo(TABLE t, char *pszSettleDate, char *pszSettleNum)
{
	EXEC SQL BEGIN DECLARE SECTION;
	long	lCount = 0, lSize = 0;
	char	szTable[100], szSettleNum[5];
	EXEC SQL END DECLARE SECTION;

	lSize = sizeof(TblDef);

	memset(szTable, 0, sizeof(szTable));
	memset(szSettleNum, 0, sizeof(szSettleNum));
	strcpy(szTable, sGetTableName(t));
	memcpy(szSettleNum, pszSettleNum, 4);

	EXEC SQL SELECT COUNT(*) INTO :lCount FROM TBL_OPR_INFO WHERE OPR_ID IN 
		(SELECT MCHT_EXPAND FROM TBL_MCHT_BASE WHERE MCHT_NO IN 
			(SELECT IBOX42 FROM TBL_MEM_MCHT_CUR WHERE SETTLE_NUM = :szSettleNum));
	if(RC_SUCC != lInitTblSize(t, lCount, sizeof(dbOprInf), &lSize))
		return RC_FAIL;

	fprintf(stdout, "开始建立表:%s\n", szTable);
	HtLog(NML_PARAM, "初始化表(%s)索引(opr_id)", szTable);
	if(RC_SUCC != IBPSetUnIdx(t, dbOprInf, opr_id, FIELD_LONG))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(opr_id)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(opr_code)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbOprInf, opr_code, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(opr_code)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(opr_name)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbOprInf, opr_name, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(opr_name)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	fprintf(stdout, "建立%s表完成 ... success\n", szTable);

	return lSize;
}

/****************************************************************************************
	加载客户表TBL_OPR_INFO
 ****************************************************************************************/
long	lLoad_OprInfo(TABLE t, Tree **pstNode, char *pszSettleDate, char *pszSettleNum)
{
	long	lCount = 0, lRes = RC_SUCC;
	Tree	*pstRoot = NULL;
	EXEC SQL BEGIN DECLARE SECTION;
	dbOprInf	stOprIf;
	char		szSettleNum[5];
	EXEC SQL END DECLARE SECTION;

	memset(szSettleNum, 0, sizeof(szSettleNum));
	memcpy(szSettleNum, pszSettleNum, 4);

	EXEC SQL DECLARE Cur_opr_info CURSOR FOR 
		SELECT NVL(OPR_ID, 0), NVL(OPR_CODE, ' '), NVL(OPR_NAME, ' ') 
		FROM TBL_OPR_INFO WHERE OPR_ID IN 
			(SELECT MCHT_EXPAND FROM TBL_MCHT_BASE WHERE MCHT_NO IN 
				(SELECT IBOX42 FROM TBL_MEM_MCHT_CUR 
					WHERE SETTLE_NUM = :szSettleNum));

	EXEC SQL OPEN Cur_opr_info;
	if(SQLCODE)
	{
		HtLog(ERR_PARAM, "定义表%s错误, (%d)(%s)", sGetTableName(t), SQLCODE, sDbsError());
		vDbsDisconnect();
		return RC_FAIL;
	}

	IBPInitTable(t);
	while(1)
	{
		memset(&stOprIf, 0, sizeof(stOprIf));
		EXEC SQL FETCH Cur_opr_info INTO :stOprIf.opr_id, :stOprIf.opr_code, :stOprIf.opr_name;
		if(SQLERR)
		{
			HtLog(ERR_PARAM, "用游标获取数据失败, (%d)(%s)", SQLCODE, sDbsError());
			EXEC SQL CLOSE Cur_opr_info;
			vDestroyTree(pstRoot);
			vDbsDisconnect();
			return RC_FAIL;
		}
		else if(SQLNOTFOUND)
			break;
		
		lCount ++;
		if(lGetTblCount(t) <= lCount)
		{
			HtLog(ERR_PARAM, "定义超限，请重新装载(%d)<(%d)!", lGetTblCount(t), lCount);
			EXEC SQL CLOSE Cur_opr_info;
			vDestroyTree(pstRoot);
			vDbsDisconnect();
			return RC_FAIL;
		}

		sTrimAll(stOprIf.opr_code);	
		sTrimAll(stOprIf.opr_name);	
		stOprIf.opr_id = lSetEXLong(stOprIf.opr_id);

		pstRoot = (Tree *)IBPInsertTree(pstRoot, (void *)&stOprIf.opr_id, ++(pGetTblDef(t)->lTreeNode),
			dbOprInf, opr_id, lGetTblPos(t) + ((IBPShm *)pGetShmRun())->m_lOffset, &lRes);
		if(RC_FAIL == lRes)
		{
			HtLog(ERR_PARAM, "装载表(%s)操作员ID(%d)失败, 原因:%s", sGetTableName(t), 
				stOprIf.opr_id, sGetError());
			EXEC SQL CLOSE Cur_opr_info;
			vDestroyTree(pstRoot);
			vDbsDisconnect();
			return RC_FAIL;
		}

		if(RC_SUCC != IBPInsertData(t, &stOprIf, sizeof(stOprIf)))
		{
			HtLog(ERR_PARAM, "新增表(%s)数据(%d)失败, 原因:%s", sGetTableName(t),
				stOprIf.opr_id, sGetError());
			EXEC SQL CLOSE Cur_opr_info;
			vDestroyTree(pstRoot);
			return RC_FAIL;
		}
	}
	EXEC SQL CLOSE Cur_opr_info;

	HtLog(NML_PARAM, "(%s)装载表空间总记录(%d), 有效记录(%d)", sGetTableName(t), lGetTblCount(t), 
		pGetTblDef(t)->lValid);

	*pstNode = pstRoot;

	return RC_SUCC;
}

/****************************************************************************************
	end
 ***************************************************************************************/
