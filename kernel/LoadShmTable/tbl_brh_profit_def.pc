#include	"Ibp.h"
#include	"DbsApi.h"
#include	"pos_stlm.h"
#include	"load.h"
#include	"table.h"

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
#include	"shmdb.h"
EXEC SQL END DECLARE SECTION;

extern	TblDef* pGetTblDef();

/****************************************************************************************
	获取系统启动所需表大小	
 ****************************************************************************************/
long	lDefine_BrhProfitDef(TABLE t, char *pszSettleDate, char *pszSettleNum)
{
	EXEC SQL BEGIN DECLARE SECTION;
	long	lCount = 0, lSize = 0;
	char	szTable[100];
	EXEC SQL END DECLARE SECTION;

	lSize = sizeof(TblDef);

	memset(szTable, 0, sizeof(szTable));
	strcpy(szTable, sGetTableName(t));

	EXEC SQL SELECT COUNT(*) INTO :lCount FROM TBL_BRH_PROFIT_DEF WHERE 1 = 1;
	if(RC_SUCC != lInitTblSize(t, lCount, sizeof(dbPfitDef), &lSize))
		return RC_FAIL;

	fprintf(stdout, "开始建立表:%s\n", szTable);
	HtLog(NML_PARAM, "初始化表(%s)索引(model_id)", szTable);
	if(RC_SUCC != IBPSetUnIdx(t, dbPfitDef, model_id, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(model_id)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(model_brh)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbPfitDef, model_brh, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(model_brh)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(model_flag)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbPfitDef, model_flag, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(model_flag)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(unite_ratio)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbPfitDef, unite_ratio, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(unite_ratio)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(profit_ratio)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbPfitDef, profit_ratio, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(profit_ratio)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	fprintf(stdout, "建立%s表完成 ... success\n", szTable);
	return lSize;
}

/****************************************************************************************
	创建客户表
 ****************************************************************************************/
long	lLoad_BrhProfitDef(TABLE t, Tree **pstNode, char *pszSettleDate, char *pszSettleNum)
{
	long	lCount = 0, lRes = RC_SUCC;
	Tree	*pstRoot = NULL;
	EXEC SQL BEGIN DECLARE SECTION;
	dbPfitDef	stPfitDef;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL DECLARE Cur_brh_profit_def CURSOR FOR 
		SELECT NVL(MODEL_ID, ' '), NVL(MODEL_BRH, ' '), NVL(MODEL_FLAG, ' '), 
			NVL(UNITE_RATIO, ' '), NVL(PROFIT_RATIO, ' ') 
		FROM TBL_BRH_PROFIT_DEF ORDER BY MODEL_ID;

	EXEC SQL OPEN Cur_brh_profit_def;
	if(SQLCODE)
	{
		HtLog(ERR_PARAM, "定义表%s错误, (%d)(%s)", sGetTableName(t), SQLCODE, sDbsError());
		return RC_FAIL;
	}

	IBPInitTable(t);
	while(1)
	{
		memset(&stPfitDef, 0, sizeof(stPfitDef));
		EXEC SQL FETCH Cur_brh_profit_def INTO :stPfitDef.model_id, 
			:stPfitDef.model_brh, :stPfitDef.model_flag, :stPfitDef.unite_ratio, 	
			:stPfitDef.profit_ratio;
		if(SQLERR)
		{
			HtLog(ERR_PARAM, "用游标获取数据失败, (%d)(%s)", SQLCODE, sDbsError());
			EXEC SQL CLOSE Cur_brh_profit_def;
			vDestroyTree(pstRoot);
			return RC_FAIL;
		}
		else if(SQLNOTFOUND)
			break;
		
		lCount ++;
		if(lGetTblCount(t) <= lCount)
		{
			HtLog(ERR_PARAM, "定义超限，请重新装载(%d)<(%d)!", lGetTblCount(t), lCount);
			EXEC SQL CLOSE Cur_brh_profit_def;
			vDestroyTree(pstRoot);
			return RC_FAIL;
		}

		sTrimAll(stPfitDef.model_id);
		sTrimAll(stPfitDef.model_brh);	
		sTrimAll(stPfitDef.model_flag);	
		sTrimAll(stPfitDef.unite_ratio);	
		sTrimAll(stPfitDef.profit_ratio);	

		pstRoot = (Tree *)IBPInsertTree(pstRoot, stPfitDef.model_id, ++(pGetTblDef(t)->lTreeNode),
			dbPfitDef, model_id, lGetTblPos(t) + ((IBPShm *)pGetShmRun())->m_lOffset, &lRes);
		if(RC_FAIL == lRes)
		{
			HtLog(ERR_PARAM, "装载分润定义模型ID(%s)失败, 原因:%s", stPfitDef.model_id, sGetError());
			EXEC SQL CLOSE Cur_brh_profit_def;
			vDestroyTree(pstRoot);
			return RC_FAIL;
		}

		if(RC_SUCC != IBPInsertData(t, &stPfitDef, sizeof(dbPfitDef)))
		{
			HtLog(ERR_PARAM, "新增表(%s)数据(%s)失败, 原因:%s", sGetTableName(t),
				stPfitDef.model_id, sGetError());
			EXEC SQL CLOSE Cur_brh_profit_def;
			vDestroyTree(pstRoot);
			return RC_FAIL;
		}
	}
	EXEC SQL CLOSE Cur_brh_profit_def;

	*pstNode = pstRoot;
	HtLog(NML_PARAM, "(%s)装载表空间总记录(%d), 有效记录(%d)", sGetTableName(t), lGetTblCount(t), 
		pGetTblDef(t)->lValid);

	return RC_SUCC;
}

/****************************************************************************************
	end
 ***************************************************************************************/
