#include	"Ibp.h"
#include	"DbsApi.h"
#include	"pos_stlm.h"
#include	"load.h"
#include	"table.h"

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
#include	"shmdb.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************
	获取系统启动所需表大小	
 ****************************************************************************************/
long	lDefine_MchtMccInf(TABLE t, char *pszSettleDate, char *pszSettleNum)
{
	EXEC SQL BEGIN DECLARE SECTION;
	long	lCount = 0, lSize = 0;
	char	szTable[100];
	EXEC SQL END DECLARE SECTION;

	lSize = sizeof(TblDef);

	memset(szTable, 0, sizeof(szTable));
	strcpy(szTable, sGetTableName(t));

	EXEC SQL SELECT COUNT(*) INTO :lCount FROM TBL_MCHT_MCC_INF WHERE 1 = 1;
	if(RC_SUCC != lInitTblSize(t, lCount, sizeof(dbMchtMccInf), &lSize))
		return RC_FAIL;

	fprintf(stdout, "开始建立表:%s\n", szTable);
	HtLog(NML_PARAM, "初始化表(%s)索引(id)", szTable);
	if(RC_SUCC != IBPSetUnIdx(t, dbMchtMccInf, id, FIELD_LONG))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(id)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(mchnt_tp)", szTable);
	if(RC_SUCC != IBPSetUnIdx(t, dbMchtMccInf, mchnt_tp, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(mchnt_tp)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(mchnt_tp_grp)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbMchtMccInf, mchnt_tp_grp, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(mchnt_tp_grp)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	fprintf(stdout, "建立%s表完成 ... success\n", szTable);
	return lSize;
}

/****************************************************************************************
	创建客户表
 ****************************************************************************************/
long	lLoad_MchtMccInf(TABLE t, Tree **pstNode, char *pszSettleDate, char *pszSettleNum)
{
	long	lCount = 0, lRes = RC_SUCC;
	Tree	*pstRoot = NULL;
	EXEC SQL BEGIN DECLARE SECTION;
	dbMchtMccInf	stMcc;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL DECLARE Cur_mcht_mcc_inf CURSOR FOR 
		SELECT NVL(ID, 0), NVL(MCHNT_TP, ' '), NVL(MCHNT_TP_GRP, ' ') 
		FROM TBL_MCHT_MCC_INF ORDER BY MCHNT_TP;

	EXEC SQL OPEN Cur_mcht_mcc_inf;
	if(SQLCODE)
	{
		HtLog(ERR_PARAM, "定义表%s错误, (%d)(%s)", sGetTableName(t), SQLCODE, sDbsError());
		return RC_FAIL;
	}

	IBPInitTable(t);
	while(1)
	{
		memset(&stMcc, 0, sizeof(stMcc));
		EXEC SQL FETCH Cur_mcht_mcc_inf INTO :stMcc.id, :stMcc.mchnt_tp, :stMcc.mchnt_tp_grp;
		if(SQLERR)
		{
			HtLog(ERR_PARAM, "用游标获取数据失败, (%d)(%s)", SQLCODE, sDbsError());
			EXEC SQL CLOSE Cur_mcht_mcc_inf;
			vDestroyTree(pstRoot);
			return RC_FAIL;
		}
		else if(SQLNOTFOUND)
			break;
		
		lCount ++;
		if(lGetTblCount(t) <= lCount)
		{
			HtLog(ERR_PARAM, "定义超限，请重新装载!(%d)<(%d)", lGetTblCount(t), lCount);
			EXEC SQL CLOSE Cur_mcht_mcc_inf;
			vDestroyTree(pstRoot);
			return RC_FAIL;
		}

		sTrimAll(stMcc.mchnt_tp);	
		sTrimAll(stMcc.mchnt_tp_grp);	
		stMcc.id = lSetEXLong(stMcc.id);

		pstRoot = (Tree *)IBPInsertTree(pstRoot, stMcc.mchnt_tp, ++(pGetTblDef(t)->lTreeNode),
			dbMchtMccInf, mchnt_tp, lGetTblPos(t) + ((IBPShm *)pGetShmRun())->m_lOffset, &lRes);
		if(RC_FAIL == lRes)
		{
			HtLog(ERR_PARAM, "装载MCC号(%s)失败, 原因:%s", stMcc.mchnt_tp, sGetError());
			EXEC SQL CLOSE Cur_mcht_mcc_inf;
			vDestroyTree(pstRoot);
			return RC_FAIL;
		}

		if(RC_SUCC != IBPInsertData(t, &stMcc, sizeof(stMcc)))
		{
			HtLog(ERR_PARAM, "新增表(%s)数据(%s)失败, 原因:%s", sGetTableName(t),
				stMcc.mchnt_tp, sGetError());
			EXEC SQL CLOSE Cur_mcht_mcc_inf;
			vDestroyTree(pstRoot);
			return RC_FAIL;
		}

	}
	EXEC SQL CLOSE Cur_mcht_mcc_inf;

	*pstNode = pstRoot;

	HtLog(NML_PARAM, "(%s)装载表空间总记录(%d), 有效记录(%d)", sGetTableName(t), lGetTblCount(t), 
		pGetTblDef(t)->lValid);

	return RC_SUCC;
}

/****************************************************************************************
	end
 ***************************************************************************************/
