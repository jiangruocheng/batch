#include	"Ibp.h"
#include	"DbsApi.h"
#include	"pos_stlm.h"
#include	"load.h"
#include	"table.h"

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
#include	"shmdb.h"
EXEC SQL END DECLARE SECTION;

/****************************************************************************************
	获取客户表TBL_MCHT_BASE启动内存大小
 ****************************************************************************************/
long	lDefine_MchtBase(TABLE t, char *pszSettleDate, char *pszSettleNum)
{
	EXEC SQL BEGIN DECLARE SECTION;
	long	lCount = 0, lSize = 0;
	char	szSettlenNum[5], szTable[100];
	EXEC SQL END DECLARE SECTION;

	lSize = sizeof(TblDef);

	memset(szTable, 0, sizeof(szTable));
	memset(szSettlenNum, 0, sizeof(szSettlenNum));
	strcpy(szTable, sGetTableName(t));
	memcpy(szSettlenNum, pszSettleNum, 4);

	EXEC SQL SELECT COUNT(*) INTO :lCount FROM TBL_MEM_MCHT_CUR WHERE SETTLE_NUM = :szSettlenNum;
	if(RC_SUCC != lInitTblSize(t, lCount, sizeof(dbMchtBase), &lSize))
		return RC_FAIL;

	fprintf(stdout, "开始建立表:%s\n", szTable);
	HtLog(NML_PARAM, "初始化表(%s)索引(id)", szTable);
	if(RC_SUCC != IBPSetUnIdx(t, dbMchtBase, id, FIELD_LONG))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(id)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(mcht_no)", szTable);
	if(RC_SUCC != IBPSetUnIdx(t, dbMchtBase, mcht_no, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(mcht_no)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(mcht_status)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbMchtBase, mcht_status, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(mcht_status)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(mcht_kind)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbMchtBase, mcht_kind, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(mcht_kind)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(mcht_type)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbMchtBase, mcht_type, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(mcht_type)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(mcht_up_no)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbMchtBase, mcht_up_no, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(mcht_up_no)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(mcht_area_no)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbMchtBase, mcht_area_no, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(mcht_area_no)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(mcht_grp)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbMchtBase, mcht_grp, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(mcht_grp)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(mcht_mcc)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbMchtBase, mcht_mcc, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(mcht_mcc)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(mcht_brh)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbMchtBase, mcht_brh, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(mcht_brh)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(mcht_stlm_brh)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbMchtBase, mcht_stlm_brh, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(mcht_stlm_brh)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(mcht_disc_id0)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbMchtBase, mcht_disc_id0, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(mcht_disc_id0)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(mcht_disc_id)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbMchtBase, mcht_disc_id, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(mcht_disc_id)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(mcht_disc_this)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbMchtBase, mcht_disc_this, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(mcht_disc_this)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(mcht_opr_flag)", szTable);
	if(RC_SUCC != IBPSetIdx(t, dbMchtBase, mcht_opr_flag, FIELD_CHAR))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(mcht_opr_flag)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	HtLog(NML_PARAM, "初始化表(%s)索引(mcht_resv1)", szTable);
	if(RC_SUCC != IBPSetUnIdx(t, dbMchtBase, mcht_resv1, FIELD_LONG))
	{
		HtLog(ERR_PARAM, "设置表(%s)字段(mcht_resv1)失败, err:(%s)", szTable, sGetError());
		return RC_FAIL;
	}

	fprintf(stdout, "建立%s表完成 ... success\n", szTable);

	return lSize;
}

/****************************************************************************************
	加载客户表TBL_MCHT_BASE
 ****************************************************************************************/
long	lLoad_MchtBase(TABLE t, Tree **pstNode, char *pszSettleDate, char *pszSettleNum)
{
	long	lCount = 0, lRes = RC_SUCC;
	Tree	*pstRoot = NULL;
	EXEC SQL BEGIN DECLARE SECTION;
	dbMchtBase		stBase;
	char			szSettleNum[5];
	EXEC SQL END DECLARE SECTION;

	memset(szSettleNum, 0, sizeof(szSettleNum));
	memcpy(szSettleNum, pszSettleNum, 4);

	EXEC SQL DECLARE Cur_mcht_base CURSOR FOR 
		SELECT NVL(id, 0), NVL(MCHT_NO, ' '), NVL(MCHT_NM, ' '), NVL(MCHT_STATUS, ' '), 
			NVL(MCHT_KIND, ' '), NVL(MCHT_TYPE, ' '), NVL(MCHT_UP_NO, ' '), 
			NVL(MCHT_AREA_NO, ' '), NVL(MCHT_ADDR, ' '), NVL(MCHT_GRP, ' '), 
			NVL(MCHT_MCC, ' '), NVL(MCHT_BRH, ' '), NVL(MCHT_STLM_BRH, ' '), 
			NVL(MCHT_DISC_ID0, ' '), NVL(MCHT_DISC_ID, ' '), NVL(MCHT_DISC_THIS, ' '), 
			NVL(MCHT_OPR_FLAG, ' '), NVL(MCHT_RESV1, 0), NVL(MCHT_EXPAND, 0) 
		FROM TBL_MCHT_BASE WHERE 
			MCHT_NO IN (SELECT IBOX42 FROM TBL_MEM_MCHT_CUR WHERE SETTLE_NUM = :szSettleNum) 
				ORDER BY MCHT_NO, MCHT_STLM_BRH;

	EXEC SQL OPEN Cur_mcht_base;
	if(SQLCODE)
	{
		HtLog(ERR_PARAM, "定义表Tbl_mcht_base错误, (%d)(%s)", SQLCODE, sDbsError());
		return RC_FAIL;
	}

	IBPInitTable(t);
	while(1)
	{
		memset(&stBase, 0, sizeof(stBase));
	   	EXEC SQL FETCH Cur_mcht_base INTO :stBase.id, :stBase.mcht_no, :stBase.mcht_nm, 
			:stBase.mcht_status, :stBase.mcht_kind, :stBase.mcht_type, :stBase.mcht_up_no, 
			:stBase.mcht_area_no, :stBase.mcht_addr, :stBase.mcht_grp, :stBase.mcht_mcc, 
			:stBase.mcht_brh, :stBase.mcht_stlm_brh, :stBase.mcht_disc_id0, 
			:stBase.mcht_disc_id, :stBase.mcht_disc_this, :stBase.mcht_opr_flag, 
			:stBase.mcht_resv1, :stBase.mcht_expand;
		if(SQLERR)
		{
			HtLog(ERR_PARAM, "用游标获取数据失败, (%d)(%s)", SQLCODE, sDbsError());
		   	EXEC SQL CLOSE Cur_mcht_base;
			vDestroyTree(pstRoot);
			return RC_FAIL;
		}
		else if(SQLNOTFOUND)
			break;

		lCount ++;
		if(lGetTblCount(t) <= lCount)
		{
			HtLog(ERR_PARAM, "定义超限，请重新装载(%d)<(%d)!", lGetTblCount(t), lCount);
		   	EXEC SQL CLOSE Cur_mcht_base;
			vDestroyTree(pstRoot);
			return RC_FAIL;
		}

		sTrimAll(stBase.mcht_no);
		sTrimAll(stBase.mcht_nm);
		sTrimAll(stBase.mcht_status);
		sTrimAll(stBase.mcht_kind);
		sTrimAll(stBase.mcht_type);
		sTrimAll(stBase.mcht_up_no);
		sTrimAll(stBase.mcht_area_no);
		sTrimAll(stBase.mcht_addr);
		sTrimAll(stBase.mcht_grp);
		sTrimAll(stBase.mcht_mcc);
		sTrimAll(stBase.mcht_brh);
		sTrimAll(stBase.mcht_stlm_brh);
		sTrimAll(stBase.mcht_disc_id0);
		sTrimAll(stBase.mcht_disc_id);
		sTrimAll(stBase.mcht_disc_this);
		sTrimAll(stBase.mcht_opr_flag);
		stBase.id = lSetEXLong(stBase.id);
		stBase.mcht_resv1 = lSetEXLong(stBase.mcht_resv1);
		stBase.mcht_expand = lSetEXLong(stBase.mcht_expand);

		pstRoot = (Tree *)IBPInsertTree(pstRoot, stBase.mcht_no, ++(pGetTblDef(t)->lTreeNode),
			dbMchtBase, mcht_no, lGetTblPos(t) + ((IBPShm *)pGetShmRun())->m_lOffset, &lRes);
		if(RC_FAIL == lRes)
		{
			HtLog(ERR_PARAM, "装载商户(%s)失败, 原因:%s", stBase.mcht_no, sGetError());
		   	EXEC SQL CLOSE Cur_mcht_base;
			vDestroyTree(pstRoot);
			return RC_FAIL;
		}

		if(RC_SUCC != IBPInsertData(t, &stBase, sizeof(stBase)))
		{
			HtLog(ERR_PARAM, "新增表(%s)数据(%s)失败, 原因:%s", sGetTableName(t),
				stBase.mcht_no, sGetError());
		   	EXEC SQL CLOSE Cur_mcht_base;
			vDestroyTree(pstRoot);
			return RC_FAIL;
		}
	}
	EXEC SQL CLOSE Cur_mcht_base;

	HtLog(NML_PARAM, "(%s)装载表空间总记录(%d), 有效记录(%d)", sGetTableName(t), lGetTblCount(t), 
		pGetTblDef(t)->lValid);

	*pstNode = pstRoot;

	return RC_SUCC;
}

/****************************************************************************************
	end
 ***************************************************************************************/
