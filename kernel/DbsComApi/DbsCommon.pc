#include	"Ibp.h"
#include	"DbsApi.h"

EXEC SQL INCLUDE SQLCA;

/****************************************************************************************
	获取操作数据库错误信息
 ****************************************************************************************/
char*	sDbsError()
{
	static char szMsg[256];

	memset(szMsg, 0, sizeof(szMsg));
	snprintf(szMsg, sizeof(szMsg), "CODE:%d, MSG[%.*s]", sqlca.sqlcode, 
		sqlca.sqlerrm.sqlerrml, sTrimCRLF(sqlca.sqlerrm.sqlerrmc));

	return szMsg;
}

/****************************************************************************************
	连接数据数据库
 ****************************************************************************************/
long	lDbsConnect(long lType)
{
	EXEC SQL BEGIN DECLARE SECTION;
	char  szSID[40], szUser[20], szPwd[20];
	EXEC SQL END DECLARE SECTION;

	memset(szSID, 0, sizeof(szSID));
	memset(szUser, 0, sizeof(szUser));
	memset(szPwd, 0, sizeof(szPwd));

	if(lType == DBS_BUSS)
	{
		strcpy(szUser, sGetDbsEnv("CB_USER"));
		strcpy(szPwd, sGetDbsEnv("CB_PASSWD"));
		strcpy(szSID, sGetDbsEnv("CORACLE_SID"));
	}
	else if(lType == DBS_TXN)
	{
		strcpy(szUser, sGetDbsEnv("TB_USER"));
		strcpy(szPwd, sGetDbsEnv("TB_PASSWD"));
		strcpy(szSID, sGetDbsEnv("TORACLE_SID"));
	}
	else if(lType == DBS_BATCH)
	{
		strcpy(szUser, sGetDbsEnv("DB_USER"));
		strcpy(szPwd, sGetDbsEnv("DB_PASSWD"));
		strcpy(szSID, sGetDbsEnv("DORACLE_SID"));
	}
	else if(lType == DBS_ROUTE)
	{
		strcpy(szUser, sGetDbsEnv("RB_USER"));
		strcpy(szPwd, sGetDbsEnv("RB_PASSWD"));
		strcpy(szSID, sGetDbsEnv("RORACLE_SID"));
	}
	else
	{
		vSetErrMsg("未定义连接数据库标识(%d)", lType);
		return RC_FAIL;
	}

	EXEC SQL CONNECT :szUser IDENTIFIED BY :szPwd using :szSID;

	return SQLCODE;
}

/****************************************************************************************
	断开当前数据库
 ****************************************************************************************/
void	vDbsDisconnect()
{
	EXEC SQL COMMIT WORK  RELEASE;
}

/****************************************************************************************
	启动数据库事务
 ****************************************************************************************/
long	lDbsBegin()
{
	return RC_SUCC;
}

/****************************************************************************************
	提交事务
 ****************************************************************************************/
long	lDbsCommit()
{
	EXEC SQL COMMIT WORK;
	return SQLCODE;
}

/****************************************************************************************
	回滚事务	
 ****************************************************************************************/
long	lDbsRollback()
{
	EXEC SQL ROLLBACK WORK;
	return SQLCODE;
}

/****************************************************************************************
	影响有效记录数	
 ****************************************************************************************/
long	lDbsEffectCnt()
{
	return  sqlca.sqlerrd[2];
}

/****************************************************************************************
	执行SQL
 ****************************************************************************************/
long	lDbsRunSQL(char *pszSQL)
{
	EXEC SQL BEGIN DECLARE SECTION;
	char	szSQL[4096];
	EXEC SQL END DECLARE SECTION;

	memset(szSQL, 0x00, sizeof(szSQL));
	strncpy(szSQL, pszSQL, sizeof(szSQL));

	EXEC SQL PREPARE sql_exec FROM :szSQL;

	EXEC SQL EXECUTE sql_exec;

	return SQLCODE;
}
